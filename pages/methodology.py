
import datetime
import pandas as pd
import altair as alt
import streamlit as st

def app():
    ev_dl_link_main = '[EudraVigilance data portal page](https://dap.ema.europa.eu/analytics/saw.dll?PortalPages)'
    vaers_dl_link = '[VAERS data download page](https://vaers.hhs.gov/)'
    adreports_search = '[Addreports selection page](https://www.adrreports.eu/en/search.html)'
    wonder_link = '[CDC VAERS WONDER](https://wonder.cdc.gov/vaers.html)' 
    bioportal_link = '[BioPortal](https://bioportal.bioontology.org/)'
    bioportal_rest = '[REST API](http://data.bioontology.org/documentation)'
    vaers_dl = '[here](https://vaers.hhs.gov/data/datasets.html)'
    meddra_link = '[MedDRA](https://www.meddra.org/)'
    medalerts_link = '[VAERS vaccine abbreviations](http://www.medalerts.org/vaersdb/abbreviations.php)'
    st.header("Data intake and preprocessing")
    bioportal_search = '[MedDRA search](https://bioportal.bioontology.org/ontologies/MEDDRA/?p=classes&conceptid=root)'
    
    st.markdown("The source data is drawn from VAERS and EudraVigilance with subclasses of MedDRA terms along with connections between subclasses scraped from Biportal primarily using the REST API. We document the primary methods used in the data intake, preprocessing, and cleaning below. The preprocessing and cleaning of the data was done primarily using Python (Jupyter notebooks) with Pandas.")
    
    st.subheader("VAERS")
    st.markdown("""We downloaded the VAERS "All Years Data" zip file from the """ + vaers_dl_link +""". The data was last downloaded on November 20, 2021 and includes reports dated up to October 19, 2021 as well as non-domestic VAERS reports. The download includes zipped collections of three csv files: "VAERSVAX", "VAERSDATA", and "VAERSSYMPTOMS" for each year from 1990 to 2021 as well for non-domestic reports where all years are grouped together.""", unsafe_allow_html = True)

    st.markdown("""The VAERSVAX files include lines for each vaccine reported for each patient, including data such as VAERS ID (the unique report ID assigned to each VAERS report), vax lot numbers, and vaccine type and vaccine name information. These files were converted to Pandas data frames. The data was processed to convert the multi-line format, one line for each vaccine to one line for each patient report (defined by the unique VAERS ID), with the possibly multi-line list of vaccinations separated by semicolons. The information about vax types and names and vax lots was also preserved and separated by semicolons. The VAERSSYMPTOM files include lines with columns for each MedDRA coded Preferred Term symptom, along with separate columns for the MedDRA version used in the coding of each term, for each VAERS ID. The csv files were converted to Pandas data frames. We then merged the columns for each separate symptom into a "Symptom List" column, separating distinct symptoms by semicolons. The VAERSDATA files include lines with columns for information such as the report date, patient age and sex, possible information about whether the patient was hospitalized or died, and a "SYMPTOM_TEXT" column which includes a written narrative by the submitter of the report that documents the experience of the patient. We then merged each of these separate data frames (ensuring that duplicates were not included) for each year and concatenated all years into one data frame. The end result, which had more than 1.7 million rows, was saved to disk.""")
    
    st.subheader("EudraVigilance")
    st.markdown("""For EudraVigilance, we downloaded data from 2018 to 2021 for the genral database and for additional Covid vaccine reports. For influenza reports we downloaded data from 2008 to 2021 (with the additional years to ensure a large enough sample for comparison). To download the main database, we used the link """ + ev_dl_link_main +""". To download the data, select "Line Listing". Choose limiting selections such as year and run the line listing. Then scroll to the bottom of the line listing page, and on the bottom right select "Export", "Data" and "CSV" to start a download. We downloaded data for 2018, 2019, 2020, and 2021 for each of these selections. Only selecting the year, however, will often not generate a download of the full database. EudraVigilance only allows around 250,000 rows to be grouped for download. To download the full data set for each year, we made additional grouping selections in the "Line Listing "selection (in addition to year) when necessary and merged the results. For example, for 2021, we downloaded separate files for selections for all combinations of "Sex" and "Reporter Group" and merged the results using Pandas. Earlier years did not require as many combinations to ensure a complete downloaded. To ensure that we downloaded the full database for each year, we checked that earliest report dates in the downloaded file were at the beginning of the appropriate year.""")
    
    st.markdown("""Additionally, we downloaded separate reports filtered to select each type of Covid vaccine from the """ + adreports_search + """. While these reports are mostly duplicates from the general database, we found that these selections have additional reports that were found in the database. For this reason, we chose to download them as well to ensure that we had as large of a sample Covid vaccine related reports as possible. To download these reports, on the adreports search page, "Select adverse drug reaction reports for substances". Then for each of "COVID-19 MRNA VACCINE MODERNA (CX-024414)", "COVID-19 MRNA VACCINE PFIZER-BIONTECH (TOZINAMERAN)", "COVID-19 VACCINE ASTRAZENECA (CHADOX1 NCOV-19)", "COVID-19 VACCINE JANSSEN (AD26.COV2.S)", click on the link, select "Line Listing", and follow the same procedure as above to download the reports for 2018, 2019, 2020, and 2021 for each of these selections. Again, since EudraVigilance only allows around 250,000 rows to be grouped for download, we made additional grouping selections when necessary for the line listing selection downloads and merged the results.""")
    
    
    st.markdown("""To download influenza vaccine data, on the adreports page, under "Select adverse drug reaction reports for substances", for each of "INFLUENZA VACCINE (SPLIT VIRION, INACTIVATED)" and "INFLUENZA VACCINE (SURFACE ANTIGEN, INACTIVATED)" we downloaded line listing reports from 2008 to 2021. The method we used for download is from the line listing selection, analagous to the method for the Covid vaccine reports and the general database.""") 
    
    st.markdown("""Once downloaded, all the files were converted to Pandas data frames. The entries in each file include, among other columns, a report identification number, patient age group, patient sex, source qualification (medical professional or not), a reaction list containing MedDRA symptom terms as well as coded severity indicators, and lists of interacting and concomitant drugs. Unlike VAERS, EudraVigilance data does not include written text describing patient symptoms, only a list of reactions as MedDRA terms. Moreover, EudraVigilance only provides patient age groups instead of exact patient ages in years.""")
    st.markdown("""The general database files along with the separate Covid vaccine files for each year were concatenated together (dropping duplicates). The resulting data fame had approximately 2.4 million rows. We created a new column indicating the vaccine type for Covid vaccine reports in the data. The reports for each vaccine type were selected using the trade names and brand names for each vaccine. For example, the Pfizer vaccine is often recorded in the EudraVigilance data under the trade name Comirnaty (or nonproprietary name Tozinameran). Since the names used for recording of the Covid vaccine types were not entirely consistent, we selected using a variety of terms for each type including the brand name and nonproprietary names. Additionally, we concatenated the influenza vaccine data files together. The influenza data contained approximately 26 thousand rows. We kept it separate from the larger database since the influenza data spans from 2008 instead of 2018 and nearly all of the data after 2018 is already included in the larger database.""")  
                
    st.subheader("Adding MedDRA Root Terms")
    st.markdown("""Then for the VAERS, EudraVigilance, and EudraVigilance vaccine data frames obtained from the above steps, we then extracted all of the separate MedDRA symptom terms found (from the "Symptom List" column in VAERS data and "Reaction List" column in EudraVigilance data) and scraped """ + bioportal_link +""" for subterms and term dependencies using the """ + bioportal_rest +""". We created a (directed) graph to store the data, with nodes representing terms and a directed edge from one term to another if the second term is a subclass of the first. Since we found that some of the BioPortal term dependency pages (or links) were broken, we checked for terms that did not update all term dependencies. For these remaining terms, we used a virtual browser (using Selenium) to scape the BioPortal """ + bioportal_search +""" and to record subclasses from the responses. After both steps, the resulting graph after scraping for all subclasses and dependencies had more than 21,000 nodes and nearly 30,000 edges. We also split the directed graph into layers, with the source nodes as layer 0 (representing MedDRA SOC terms) and the largest layers containing terms found in the source data (primarily layer 3 MedDRA Preferred Terms). For each node in the graph, we defined its roots to be the nodes leading to a root term. For instance a layer 3 term, has layer 2 roots consisting of all layer 2 terms than include the given term as subclasses. The layer 1 roots, in turn are all the layer 1 terms that include of the layer 2 roots as subclasses. Similarly, the layer 0 roots are all the layer 0 terms that include layer 1 term as a subclass. For example, the layer 3 term "Malaria" has layer 2 roots: "Anaemias NEC" and "Plasmodia infections", layer 1 roots: "Protozoal infectious disorders" and layer 0 roots: "Infections and infestations" and "Blood and lymphatic system disorders". With this data, we created additional columns for each root layer and stored the distinct root terms present in each term layer (with counts of multiplicities stored separately, although we only counted at most one of each type of term at each layer for each report). The resulting data frames were saved to disk for use in later analysis.""", unsafe_allow_html = True)
    
    st.header("Symptom Comparison")
    st.markdown("""Using the pre-processed data obtained using the above methods, we filtered the data frames to select each type for comparison, either all Covid vaccines, particular Covid vaccines, influenza vaccines, or past data. For VAERS data, we also made further selections to exclude or include foreign reports. The VAERS EudraVigilance reports were obtained by selecting rows that have a listed vaccine type ("VAX_TYPE" columns) among a selection of influenza vaccines (namely FLU(H1N1), FLU3, FLU4, FLUA3, FLUC3, FLUC4, FLUN(H1N1), FLUN3, FLUN4, FLUR3, FLUR4, FLUX, and FLUX(H1N1), see """ + medalerts_link +""" for information about abbreviations.) Additionally, we excluded reports from the influenza control data that also were related to Covid vaccines. The Covid vaccine reports were obtained for VAERS by filtering for columns that contained "COVID19" as "VAX_TYPE". Further refinements into type of Covid vaccine were obtained by selecting rows with vaccine names corresponding to each type. For EudraVigilance we selected using the column for vaccine type we added during preprocessing. For the EudraVigilance influenza data, we loaded the separate influenza data frame from preprocessing.""", unsafe_allow_html = True)
    
    st.markdown("""Then for each of the above selections, and for each root layer separately, we counted the frequencies of each terms at that layer among the root terms. We counted roots such that a given root can only occur at most once in a given row. For example, say a given row (representing a patient report) has only two terms listed for the symptom list and both terms are subclasses of the same layer 2 term. Then that layer 2 term is only counted once for that given row. We chose to count this way so that reports that use a multitude of symptom terms are not overemphasized and also to keep the scale of the term counts similar for each symptom layer (and not depend on the way the MedDRA terms are organized) to allow for normalization by the total number of reports. We then normalized these frequencies by dividing by the total number of reports in the selection. We then computed percent changes between relative frequencies for the same term at a given layer with respect to any given two of these relative frequency distributions. The results were stored and are used to create the plots on the "Symptom Comparison" page.""", unsafe_allow_html = True)