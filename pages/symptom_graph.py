
import streamlit as st
from streamlit_agraph import agraph
import networkx as nx
import pickle
with open('data/symptom_graph.p', 'rb') as f:
        G = pickle.load(f)
        
def get_layers(G):
    """Get graph layers"""
    in_degrees=list(G.in_degree())
    layers=dict()
    depth=0

    while True:
        layer=[]
        if depth==0:
            for (v,d) in in_degrees:
                if d==0:
                    layer.append(v)
        else:
            for u in layers[depth-1]:
                for v in G.successors(u):
                    layer.append(v)
        if not layer:
            break
        layer=list(set(layer))
        layers[depth]=layer
        depth+=1
    return layers  


def app():
#     st.title('MedDRA Symptoms')
    st.markdown(
    """ <style>
            div[role="radiogroup"] >  :first-child{
                display: none !important;
            }
        </style>
        """,
    unsafe_allow_html=True
    )
    st.write('Click on MedDRA terms below to explore term dependencies. Layer 0 terms are the most general, with later layers being more specific.')
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        st.subheader('Layer 0')
        st.write('System Organ Class (SOC)')
        term0 = st.radio("""Select layer 0 term""",
                 options= sorted([''] + get_layers(G)[0]))
    with col2:
        term1 = ''
        if term0:
            st.subheader('Layer 1')
            st.write('Highest Level Group Term (HLGT)') 
            term1 = st.radio(f"""Select subclass of \"{term0[:47]}""" + """\":""",
                 options= sorted([''] + list(G.successors(term0))))
    with col3:
        term2 = ''
        if term1:
            st.subheader('Layer 2')
            st.write('Highest Level Term (HLT)')
            term2 = st.radio(f"""Select subclass \"{term1[:47]}""" + """\":""",
                 options= sorted([''] + list(G.successors(term1))))    
    with col4:
        term3 = ''
        if term2:
            st.subheader('Layer 3')
            st.write('Preferred Term (PT)')
            term3 = st.radio(f"Subclasses of {term2}",
                 options= sorted([''] + list(G.successors(term2))))
    with col5:
        term4 = ''
        if term3 and (len(list(G.successors(term3)))>0):
            st.subheader('Layer 4')
            st.write('Lowest Level Term (LLT)')
            term4 = st.radio(f"Subclasses of {term3}",
                 options= sorted([''] + list(G.successors(term3)))) 
    link = '[BioPortal](https://bioportal.bioontology.org/)'
    meddra_coding = '[MedDRA - Terminologies & Coding](https://meddra.org/sites/default/files/page/documents_insert/meddra_-_terminologies_coding.pdf)'
    st.markdown('<br/>The MedDRA terms and dependencies were generated by scraping sublasses and term dependencies from ' + link +' using the REST API for terms found in the source data. Only terms and lower layer subclasses generated from those terms found in the source data are included.', unsafe_allow_html=True)
    
    
    
    
    

        
        
    





